
@article{angles_renze_pg-keys_2021,
	title = {{PG}-{Keys}: {Keys} for {Property} {Graphs}},
	url = {https://dl.acm.org/doi/pdf/10.1145/3448016.3457561},
	urldate = {2024-04-28},
	author = {Angles, Renze and Bonifati, Angela and Dumbrava, Stefania},
	month = jun,
	year = {2021},
	pages = {2423--2436},
}

@misc{yuanyuan_tian_world_2022,
	title = {The {World} of {Graph} {Databases} from {An} {Industry} {Perspective}},
	url = {https://arxiv.org/pdf/2211.13170},
	urldate = {2024-04-28},
	author = {Yuanyuan, Tian},
	month = nov,
	year = {2022},
}

@misc{patil_survey_nodate,
	title = {A {Survey} on {Graph} {Database} {Management} {Techniques} for {Huge} {Unstructured} {Dat}},
	url = {https://ijece.iaescore.com/index.php/IJECE/article/view/10417/8352},
	urldate = {2024-04-28},
	publisher = {International Journal of Electrical and Computer Engineering (IJECE)},
	author = {Patil, N.S. and Kiran, P. and Naresh Patel, K.M.},
}

@misc{hare_isoiec_2024,
	title = {{ISO}/{IEC} 39075:2024 {Information} {Technology} – {Database} languages},
	url = {https://jtc1info.org/slug/gql-database-language/},
	urldate = {2024-04-28},
	author = {Hare, Keith W.},
	month = apr,
	year = {2024},
}

@book{duckham_matt_gis_2024,
	address = {London},
	edition = {3},
	title = {{GIS} {A} {Computing} {Perspective}},
	isbn = {0.1201/9780429168093-2},
	publisher = {CRC Press},
	author = {Duckham, Matt and Sun, Qian and Worboys, Michael F.},
	year = {2024},
}

@article{barcelo_expressive_2012,
	title = {A {Expressive} {Languages} for {Path} {Queries} over {Graph}-{Structured} {Data}},
	volume = {37},
	doi = {10.1145/2389241.2389250},
	journal = {ACM Transactions on Database Systems},
	author = {Barceló, Pablo and Libkin, Leonid and Lin, Anthony and Wood, Peter},
	month = dec,
	year = {2012},
	pages = {31},
}

@article{timon-reina_overview_2021,
	title = {An overview of graph databases and their applications in the biomedical domain},
	volume = {2021},
	copyright = {http://creativecommons.org/licenses/by/4.0/},
	issn = {1758-0463},
	url = {https://academic.oup.com/database/article/doi/10.1093/database/baab026/6277712},
	doi = {10.1093/database/baab026},
	abstract = {Abstract
            Over the past couple of decades, the explosion of densely interconnected data has stimulated the research, development and adoption of graph database technologies. From early graph models to more recent native graph databases, the landscape of implementations has evolved to cover enterprise-ready requirements. Because of the interconnected nature of its data, the biomedical domain has been one of the early adopters of graph databases, enabling more natural representation models and better data integration workflows, exploration and analysis facilities. In this work, we survey the literature to explore the evolution, performance and how the most recent graph database solutions are applied in the biomedical domain, compiling a great variety of use cases. With this evidence, we conclude that the available graph database management systems are fit to support data-intensive, integrative applications, targeted at both basic research and exploratory tasks closer to the clinic.},
	language = {en},
	urldate = {2024-05-27},
	journal = {Database},
	author = {Timón-Reina, Santiago and Rincón, Mariano and Martínez-Tomás, Rafael},
	month = may,
	year = {2021},
	pages = {baab026},
	file = {Volltext:/Users/daniellanghann/Zotero/storage/GUCMS5Y9/Timón-Reina et al. - 2021 - An overview of graph databases and their applicati.pdf:application/pdf},
}

@inproceedings{fan_adding_2016,
	address = {San Francisco California USA},
	title = {Adding {Counting} {Quantifiers} to {Graph} {Patterns}},
	isbn = {978-1-4503-3531-7},
	url = {https://dl.acm.org/doi/10.1145/2882903.2882937},
	doi = {10.1145/2882903.2882937},
	language = {en},
	urldate = {2024-05-27},
	booktitle = {Proceedings of the 2016 {International} {Conference} on {Management} of {Data}},
	publisher = {ACM},
	author = {Fan, Wenfei and Wu, Yinghui and Xu, Jingbo},
	month = jun,
	year = {2016},
	pages = {1215--1230},
	file = {Volltext:/Users/daniellanghann/Zotero/storage/42VJRPGF/Fan et al. - 2016 - Adding Counting Quantifiers to Graph Patterns.pdf:application/pdf},
}

@article{MONDAL2020103549,
title = {Building a trust-based doctor recommendation system on top of multilayer graph database},
journal = {Journal of Biomedical Informatics},
volume = {110},
pages = {103549},
year = {2020},
issn = {1532-0464},
doi = {https://doi.org/10.1016/j.jbi.2020.103549},
url = {https://www.sciencedirect.com/science/article/pii/S1532046420301775},
author = {Safikureshi Mondal and Anwesha Basu and Nandini Mukherjee},
keywords = {,  relationship,  data model, , , },
abstract = {In healthcare applications, developing a data model for storing patient–doctor relationships is important. Though relational models are popular for many commercial and business applications, they may not be appropriate for modeling patient–doctor relationships due to their inherent irregular nature and complexities. In this paper, as a case study, we propose to build a doctor recommendation system for the patients. The recommendation system is built on top of a multilayer graph data model. Contemporary research papers have already shown that multilayer graph data models can be efficiently used in many applications where large, heterogeneous data are to be modeled. As part of the recommendation system, the paper also introduces a concept of trust which is one important ingredient of any kind of recommendation. The trust factor introduced in the paper exploits certain characteristics of the multilayer graph model. The paper also presents some analysis to demonstrate the efficiency of the graph data model in comparison with relational data model.}
}

@article{PINO2024100997,
title = {A logical approach to graph databases},
journal = {Journal of Logical and Algebraic Methods in Programming},
volume = {141},
pages = {100997},
year = {2024},
issn = {2352-2208},
doi = {https://doi.org/10.1016/j.jlamp.2024.100997},
url = {https://www.sciencedirect.com/science/article/pii/S2352220824000518},
author = {Elvira Pino and Fernando Orejas and Nikos Mylonakis and Edelmira Pasarella},
keywords = {Graph databases, Query languages, Logic of graphs},
abstract = {Graph databases are now playing an important role because they allow us to overcome some limitations of relational databases. In particular, in graph databases we are interested not only on the data contained but also on its topology. As a consequence, most graph database queries are navigational, asking whether some nodes are connected by edges or paths. Up to now, most foundational work has concentrated on the study of computational models and query languages, analyzing their expressivity, computability, and complexity. However, in our work we address a different kind of foundational work. We are not concerned with expressibility, efficiency or feasibility issues, but with correctness. More precisely, given an algorithm or an implementation for solving queries, how can we be sure that the answers obtained are correct (soundness) and that all possible correct answers are obtained by our implementation (completeness). In this sense, in this paper we first present a core query language, similar to Cypher or G-Core. Then, we define a simple logic whose formulas are precisely the database queries, and whose satisfaction relation defines what is a correct answer. Finally, we define an operational semantics, which could be seen as an abstract implementation of our language, showing that the semantics is correct, i.e. sound and complete with respect to our logic.}
}

@article{SAAD2023136344,
title = {A graph database for life cycle inventory using Neo4j},
journal = {Journal of Cleaner Production},
volume = {393},
pages = {136344},
year = {2023},
issn = {0959-6526},
doi = {https://doi.org/10.1016/j.jclepro.2023.136344},
url = {https://www.sciencedirect.com/science/article/pii/S0959652623005024},
author = {Mohamed Saad and Yingzhong Zhang and Jinghai Tian and Jia Jia},
keywords = {Life cycle inventory, Labeled property graph, Neo4j database management system, Graph database, Knowledge graph},
abstract = {Life cycle inventory (LCI) databases constitute the basis for the life cycle assessment (LCA) of a product system. LCI data involve complex relationships between the production activities and the environment. The currently used relational database employs a rigid schema structure of two-dimensional tables and lacks direct support for the complex relationships between LCI data. In this paper, a graph database was designed and constructed using Neo4j graph database management system. First, an LCI knowledge graph (LCIKG) model for the graph database is proposed, which employs the labeled property graph structure and describes the LCI data and the semantic relationships among LCI data concepts. Second, Ecoinvent datasets were successfully used to construct the LCI graph database by automatically extracting Cypher syntax patterns; then, Neo4j was used to store, visualize, and retrieve LCI data. Finally, a set of queries have been executed to evaluate the performance of the graph database; a case study has been provided to demonstrate the effectiveness of the proposed graph database. The graph database can effectively reduce the time and effort to query and process LCI data of a product system. Moreover, the dynamic schema of the LCIKG model promotes the scalability and interoperability of LCI data. The completed work provides a feasible solution for the issues and challenges in current LCI research and promotes the wide application of LCA.}
}

@article{WIHARJA2020100616,
title = {Schema aware iterative Knowledge Graph completion},
journal = {Journal of Web Semantics},
volume = {65},
pages = {100616},
year = {2020},
issn = {1570-8268},
doi = {https://doi.org/10.1016/j.websem.2020.100616},
url = {https://www.sciencedirect.com/science/article/pii/S1570826820300494},
author = {Kemas Wiharja and Jeff Z. Pan and Martin J. Kollingbaum and Yu Deng},
keywords = {Knowledge Graph completion, Schema aware, Knowledge Graph reasoning, Approximate reasoning, SHACL constraint, Correctness and coverage},
abstract = {Recent success of Knowledge Graph has spurred widespread interests in methods for the problem of Knowledge Graph completion. However, efforts to understand the quality of the candidate triples from these methods, in particular from the schema aspect, have been limited. Indeed, most existing Knowledge Graph completion methods do not guarantee that the expanded Knowledge Graphs are consistent with the ontological schema of the initial Knowledge Graph. In this work, we challenge the silver standard method, by proposing the notion of schema-correctness. A fundamental challenge is how to make use of different types of Knowledge Graph completion methods together to improve the production of schema-correct triples. To address this, we analyse the characteristics of different methods and propose a schema aware iterative approach to Knowledge Graph completion. Our main findings are: (i) Some popular Knowledge Graph completion methods have surprisingly low schema-correctness ratio; (ii) Different types of Knowledge Graph completion methods can work with each other to help overcame individual limitations; (iii) Some iterative sequential combinations of Knowledge Graph completion methods have significantly better schema-correctness and coverage ratios than other combinations; (iv) All the MapReduce based iterative methods outperform involved single-pass methods significantly over the tested Knowledge Graphs in terms of productivity of schema-correct triples. Our findings and infrastructure can help further work on evaluating Knowledge Graph completion methods, more fine-grained approaches for schema aware iterative knowledge graph completion, as well as new approximate reasoning approaches based Knowledge Graph completion methods.}
}

@ARTICLE{10565888,

  author={Chaudhry, Hassan Nazeer and Rossi, Matteo},

  journal={IEEE Access}, 

  title={Optimising queries for pattern detection over large scale temporally evolving graphs}, 

  year={2024},

  volume={},

  number={},

  pages={1-1},

  keywords={Optimization;Real-time systems;Query processing;Social networking (online);Databases;Data structures;Transportation;Graph data structures;Distributed Computations;Vertex-Centric computations;Temporal Pattern Recognition;Query Optimization;Dynamic graph computations},

  doi={10.1109/ACCESS.2024.3417352}}

  @ARTICLE{1702016,

  author={Ceri, S. and Gottlob, G.},

  journal={IEEE Transactions on Software Engineering}, 

  title={Translating SQL Into Relational Algebra: Optimization, Semantics, and Equivalence of SQL Queries}, 

  year={1985},

  volume={SE-11},

  number={4},

  pages={324-345},

  keywords={Algebra;Database languages;Query processing;Production;Calculus;Database systems;Relational databases;Formal languages;Proposals;Program translation;query equivalence;query languages;query optimization;relational algebra;relational database model;SQL},

  doi={10.1109/TSE.1985.232223}}

  @misc{noauthor_opencypher_2024,
	title = {{openCypher}},
	url = {https://opencypher.org/},
	urldate = {2024-06-23},
	journal = {openCypher},
	month = jun,
	year = {2024},
}

@misc{noauthor_neo4j_223,
title = {{Neo4J}},
url = {https://neo4j.com/},
urldate = {2024-06-23},
journal = {Neo4J},
year = {223},
}

@INPROCEEDINGS{7231397,
  author={Dongoran, Emir Septian Sori and Rahmat Saleh, W. Kemas and Gozali, Alfian Akbar},
  booktitle={2015 3rd International Conference on Information and Communication Technology (ICoICT)}, 
  title={Analysis and implementation of graph indexing for graph database using GraphGrep algorithm}, 
  year={2015},
  volume={},
  number={},
  pages={59-64},
  keywords={Filtering;Fingerprint recognition;Testing;Indexing;Matrix converters;graph indexing;GraphGrep;subgraph matching;backtrack;Ullman},
  doi={10.1109/ICoICT.2015.7231397}}

  @article{bach_testing_2022,
  title = {Testing {Very} {Large} {Database} {Management} {Systems}: {The} {Case} of {SAP} {HANA}},
  volume = {22},
  issn = {1610-1995},
  url = {https://doi.org/10.1007/s13222-022-00426-x},
  doi = {10.1007/s13222-022-00426-x},
  abstract = {Software Testing is an established activity in the software development process to ensure and improve the quality of a software. Consequently, there exists a wide range of literature, popular information, and even multiple ISO standards covering this topic. However, we found that testing very large database management systems (DBMS) requires special adaptations of the generally available guidance for software testing and requires to solve specific challenges that may not be relevant for other areas or smaller software projects. We therefore discuss the testing of SAP HANA, a very large software project with millions of lines of code, to share insights about our approach, best practices, and unsolved challenges that are open for further research.},
  number = {3},
  journal = {Datenbank-Spektrum},
  author = {Bach, Thomas and Andrzejak, Artur and Seo, Changyun and Bierstedt, Christian and Lemke, Christian and Ritter, Daniel and Hwang, Dong Won and Sheshi, Erda and Schabernack, Felix and Renkes, Frank and Gaumnitz, Gordon and Martens, Jakob and Hoemke, Lars and Felderer, Michael and Rudolf, Michael and Jambigi, Neetha and May, Norman and Joy, Robin and Scheja, Ruben and Schwedes, Sascha and Seibel, Sebastian and Seifert, Sebastian and Haas, Stefan and Kraft, Stephan and Kroll, Thomas and Scheuer, Tobias and Lehner, Wolfgang},
  month = nov,
  year = {2022},
  pages = {195--215},
}

@INPROCEEDINGS{10391694,
  author={Lopes, André and Rodrigues, Diogo and Saraiva, João and Abbasi, Maryam and Martins, Pedro and Wanzeller, Cristina},
  booktitle={2023 Second International Conference On Smart Technologies For Smart Nation (SmartTechCon)}, 
  title={Scalability and Performance Evaluation of Graph Database Systems: A Comparative Study of Neo4j, JanusGraph, Memgraph, NebulaGraph, and TigerGraph}, 
  year={2023},
  volume={},
  number={},
  pages={537-542},
  keywords={Performance evaluation;Scalability;Memory management;Loading;Random access memory;Database systems;Time factors;Graph databases;Performance evaluation;Scalability analysis;Database management systems (DBMS);Neo4j;Data handling efficiency},
  doi={10.1109/SmartTechCon57526.2023.10391694}}


@misc{apache_gremlin_2024,
	title = {Apache {TinkerPop}: {Gremlin}},
	url = {https://tinkerpop.apache.org/gremlin.html},
	journal = {Apache TinkerPop: Gremlin},
	author = {Software Foundation, Apache},
	month = jun,
	year = {2024},
}

@misc{gremlin_chaos_nodate,
	title = {Chaos {Engineering} on {AWS}},
	url = {https://www.gremlin.com/aws},
	abstract = {Chaos Engineering on AWS},
	urldate = {2024-06-24},
	journal = {Chaos Engineering on AWS},
	author = {Gremlin Inc.},
}

@misc{sharma_what_2024,
	title = {What is {Azure} {Cosmos} {DB} for {Apache} {Gremlin}?},
	url = {https://learn.microsoft.com/en-us/azure/cosmos-db/gremlin/introduction},
	abstract = {What is Azure Cosmos DB for Apache Gremlin?},
	urldate = {2024-06-24},
	journal = {What is Azure Cosmos DB for Apache Gremlin?},
	author = {Sharma, Manish and Wang, William W and Porter, Simon},
	month = jun,
	year = {2024},
}

@misc{apache_hadoop_2024,
	title = {Apache {Hadoop}},
	url = {https://hadoop.apache.org/},
	urldate = {2024-06-24},
	journal = {Apache Hadoop},
	author = {Software Foundation, Apache},
	month = jun,
	year = {2024},
}


@misc{apache_spark_2024,
	title = {Apache {Spark}},
	url = {https://spark.apache.org/},
	urldate = {2024-06-24},
	journal = {Apache Spark},
	author = {Software Foundation, Apache},
	month = jun,
	year = {2024},
}

@article{XU202212,
title = {SimGQ+: Simultaneously evaluating iterative point-to-all and point-to-point graph queries},
journal = {Journal of Parallel and Distributed Computing},
volume = {164},
pages = {12-27},
year = {2022},
issn = {0743-7315},
doi = {https://doi.org/10.1016/j.jpdc.2022.01.007},
url = {https://www.sciencedirect.com/science/article/pii/S0743731522000120},
author = {Chengshuo Xu and Abbas Mazloumi and Xiaolin Jiang and Rajiv Gupta},
keywords = {Batch of queries, Sharing computation, Amortizing overhead, Power-law graphs, Graph analytics},
}

@article{CABRAL2023102165,
title = {Enabling schema-independent data retrieval queries in MongoDB},
journal = {Information Systems},
volume = {114},
pages = {102165},
year = {2023},
issn = {0306-4379},
doi = {https://doi.org/10.1016/j.is.2023.102165},
url = {https://www.sciencedirect.com/science/article/pii/S0306437923000017},
author = {João Vitor Lopes Cabral and Viviana Elizabeth Romero Noguera and Ricardo Rodrigues Ciferri and Daniel Lucrédio},
keywords = {NoSQL databases, Model management, Code generation, Query rewriting, Entity-Relationship algebra},
}

@misc{sparql_2024,
	title = {SPARQL},
	url = {https://www.w3.org/TR/sparql11-query/},
	urldate = {2024-06-24},
	journal = {W3C},
	author = {W3C, World Wide Web Consortium (W3C)},
	month = jun,
	year = {2024},
}

@inbook{10.1145/3591366.3591376,
	author = {Berners-Lee, Tim and Hendler, James and Lassila, Ora},
	title = {The Semantic Web: A New Form of Web Content that is Meaningful to Computers will Unleash a Revolution of New Possibilities},
	year = {2023},
	isbn = {9798400707940},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	edition = {1},
	url = {https://doi.org/10.1145/3591366.3591376},
	booktitle = {Linking the World’s Information: Essays on Tim Berners-Lee’s Invention of the World Wide Web},
	pages = {91–103},
	numpages = {13},
}

@article{DBLP:journals/corr/NaackeCA16,
  author       = {Hubert Naacke and
                  Olivier Cur{\'{e}} and
                  Bernd Amann},
  title        = {{SPARQL} query processing with Apache Spark},
  journal      = {CoRR},
  volume       = {abs/1604.08903},
  year         = {2016},
  url          = {http://arxiv.org/abs/1604.08903},
  eprinttype    = {arXiv},
  eprint       = {1604.08903},
  timestamp    = {Mon, 13 Aug 2018 16:47:43 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/NaackeCA16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{aws_openCypher_2024,
	title = {Accessing the Neptune Graph with {openCypher}},
	url = {https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-opencypher.html},
	urldate = {2024-06-24},
	journal = {AWS},
	author = {Amazon Web Services, AWS},
	month = jun,
	year = {2024},
}

@article{BARCELO2017164,
title = {On the data complexity of consistent query answering over graph databases},
journal = {Journal of Computer and System Sciences},
volume = {88},
pages = {164-194},
year = {2017},
issn = {0022-0000},
doi = {https://doi.org/10.1016/j.jcss.2017.03.015},
url = {https://www.sciencedirect.com/science/article/pii/S0022000017300521},
author = {Pablo Barceló and Gaëlle Fontaine},
keywords = {Graph databases, Regular path queries, Consistent query answering, Description logics, Rewrite systems},
abstract = {Applications of graph databases are prone to inconsistency due to interoperability issues. This raises the need for studying query answering over inconsistent graph databases in a simple but general framework. We follow the approach of consistent query answering (CQA), and study its data complexity over graph databases for conjunctive regular-path queries (CRPQs) and conjunctive regular-path constraints (CRPCs). We deal with subset, superset and symmetric-difference repairs. Without restrictions, CQA is undecidable for the semantics of superset- and symmetric-difference repairs, and Π2P-complete for subset-repairs. However, we identify restrictions on CRPCs and databases that lead to decidability, and even tractability of CQA.}
}

@article{SHIN202292,
title = {Knowledge graph embedding and reasoning for real-time analytics support of chemical diagnosis from exposure symptoms},
journal = {Process Safety and Environmental Protection},
volume = {157},
pages = {92-105},
year = {2022},
issn = {0957-5820},
doi = {https://doi.org/10.1016/j.psep.2021.11.002},
url = {https://www.sciencedirect.com/science/article/pii/S095758202100598X},
author = {Eunji Shin and Sangwoo Yoo and Yongtaek Ju and Dongil Shin},
keywords = {Chemical Safety, Exposure Symptom Knowledge, Data Analytics, Knowledge Graph, Knowledge Graph Embedding, Knowledge Graph Reasoning},
abstract = {Chemical exposure accidents pose a risk of serious injury and property damage if the diagnosis or response is not properly performed after the initial discovery. Due to lack of research on the dynamically changing environment and detection of chemical substances considering symptoms, real-time knowledge services are required, such as rapid diagnosis of chemicals exposed at the accident site and the following early response. In this study, we propose an AI-based analysis system, Symptom-based Expert for Advanced Response to Chemical Hazards (SEARCH), for chemical substance diagnosis from exposure symptoms actively collected for real-time response and mitigation to hazardous material accidents. Knowledge is collected from chemical database such as WISER, PubChem etc., and integrated for the analytics of chemical exposure accidents and contact symptoms. We design and construct ontology and knowledge graph (KG) for 1001 major chemical substances. The built KG is verified using KG embedding models and the performance of each model is compared. The proposed system identifies the substance candidates through KG query and reasoning considering the exposure conditions. Using the symptom KG, the system SEARCH can provide the means to analyze real-time data from the field and transform it into insights and actions related to emergency response.}
}

@article{PATIL2024102683,
title = {Enhancing fraud detection in banking by integration of graph databases with machine learning},
journal = {MethodsX},
volume = {12},
pages = {102683},
year = {2024},
issn = {2215-0161},
doi = {https://doi.org/10.1016/j.mex.2024.102683},
url = {https://www.sciencedirect.com/science/article/pii/S2215016124001377},
author = {Ayushi Patil and Shreya Mahajan and Jinal Menpara and Shivali Wagle and Preksha Pareek and Ketan Kotecha},
keywords = {Fintech, Bank transactions, Machine learning algorithms, Fraud detection, Online banking},
abstract = {The banking sector's shift from traditional physical locations to digital channels has offered customers unprecedented convenience and increased the risk of fraud for customers and institutions alike. In this study, we discuss the pressing need for robust fraud detection & prevention systems in the context of evolving technological environments. We introduce a graph-based machine learning model that is specifically designed to detect fraudulent activity in various types of banking operations, such as credit card transactions, debit card transactions, and online banking transactions. This model uses advanced methods for anomalies, behaviors, and patterns to analyze past transactions and user behavior almost immediately. We provide an in-depth methodology for evaluating fraud detection systems based on parameters such as Accuracy Recall rate and False positive rate ROC curves. The findings can be used by financial institutions to develop and enhance fraud detection strategies as they demonstrate the effectiveness and reliability of the proposed approach. This study emphasizes the critical role that innovative technologies play in safeguarding the financial sector from the ever-changing strategies of fraudsters while also enhancing banking security.•This paper aims to implement the detection of fraudulent transactions using a state-of-the-art Graph Database approach.•The relational graph of features in the dataset used is modelled using Neo4J as a graph database.•Applying JSON features from the exported graph to various Machine Learning models, giving effective outcomes.}
}

@incollection{SUN2024223,
title = {Chapter 5 - Scalable graphs},
editor = {Ricky Sun},
booktitle = {The Essential Criteria of Graph Databases},
publisher = {Elsevier},
pages = {223-269},
year = {2024},
isbn = {978-0-443-14162-1},
doi = {https://doi.org/10.1016/B978-0-443-14162-1.00006-4},
url = {https://www.sciencedirect.com/science/article/pii/B9780443141621000064},
author = {Ricky Sun},
keywords = {Graph database architecture, Horizontal scalability, Distributed consensus, RAFT, HTAP, Grid, Shard, Partitioning},
abstract = {Designing a distributed and scalable graph database system is not a trivial task. Many of the knowledge and engineering practices about scalable database designs we have learned in the past would not work well on graph databases. This is due to the unique challenges of graph data and graph queries. This chapter leads the readers to take a panoramic and analytical review of distributed system design concepts and gradually progress from vertical scalability to horizontal scalability, and offers detailed examples and instructions on how to architect a sound distributed graph system and validate if there are any design loopholes.}
}

@article{KUMAR2024100308,
title = {AOPWIKI-EXPLORER: An interactive graph-based query engine leveraging large language models},
journal = {Computational Toxicology},
volume = {30},
pages = {100308},
year = {2024},
issn = {2468-1113},
doi = {https://doi.org/10.1016/j.comtox.2024.100308},
url = {https://www.sciencedirect.com/science/article/pii/S2468111324000100},
author = {Saurav Kumar and Deepika Deepika and Karin Slater and Vikas Kumar},
keywords = {Adverse outcome pathway, Large language model, Graph database, Risk assessment, Artificial intelligence, Data integration, Information retrieval, Information extraction},
abstract = {Adverse Outcome Pathways (AOPs) provide a basis for non-animal testing, by outlining the cascade of molecular and cellular events initiated upon stressor exposure, leading to adverse effects. In recent years, the scientific community has shown interest in developing AOPs through crowdsourcing, with the results archived in the AOP-Wiki: a centralized repository coordinated by the OECD, hosting nearly 512 AOPs (April, 2023). However, the AOP-Wiki platform currently lacks a versatile querying system, which hinders developers' exploration of the AOP network and impedes its practical use in risk assessment. This work proposes to unleash the full potential of the AOP-Wiki archive by adapting its data into a Labelled Property Graph (LPG) schema. Additionally, the tool offers a visual network query interface for both database-specific and natural language queries, facilitating the retrieval and analysis of graph data. The multi-query interface allows non-technical users to construct flexible queries, thereby enhancing the potential for AOP exploration. By reducing the time and technical requirements, the present query engine enhances the practical utilization of the valuable data within AOP-Wiki. To evaluate the platform, a case study is presented with three levels of use-case scenarios (simple, moderate, and complex queries). AOPWIKI-EXPLORER is freely available on GitHub (https://github.com/Crispae/AOPWiki_Explorer) for wider community reach and further enhancement.}
}







